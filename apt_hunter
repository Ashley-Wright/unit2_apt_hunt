#!/usr/bin/env ruby
require_relative 'lib/environment'
require_relative 'models/apt_complex'
require_relative 'models/apartment'
require_relative 'lib/argument_parser'

class ApartmentHunter
  attr_reader :options

  def initialize
    @options = Parser.parse
    @options[:command] = ARGV[0]
    @options[:table] = ARGV[1]
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection
    if options[:table] == 'complex'
      self.complex
    elsif options[:table] == 'apartment'
      self.apartment
    end
  end

  def complex
    if options[:command] == 'create'
      error_message = AptComplex.validate(options)

      if error_message.nil?
        AptComplex.create(name: options[:name], zip: options[:zip], parking: options[:parking], website: options[:website], phone: options[:phone])
        puts "Complex #{options[:name]} was created."
      else
        puts error_message
      end
    elsif options[:command] == 'view'
      puts AptComplex.view
    elsif options[:command] == "edit"
      if complex = AptComplex.get(options[:id])
        complex.update(options)
        puts "Complex #{complex.id} was updated."
        puts complex.to_s
      else
        puts "Complex #{options[:id]} does not exist."
      end
    end
  end

  def apartment
    if options[:command] == 'create'
      options[:complex_id] = Apartment.get_complex_id(options[:complex])
      apartment = Apartment.create(rent: options[:rent], size: options[:size], bedrooms: options[:bedrooms], bathrooms: options[:bathrooms], complex_id: options[:complex_id])
      puts "Apartment was created."
      puts apartment.to_s
    end
  end

end

apartmenthunter = ApartmentHunter.new()
apartmenthunter.main()
