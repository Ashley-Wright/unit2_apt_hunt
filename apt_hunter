#!/usr/bin/env ruby
require_relative 'lib/environment'
require_relative 'models/apartment_complex'
require_relative 'models/apartment'
require_relative 'lib/argument_parser'

class ApartmentHunter
  attr_reader :options

  def initialize
    @options = Parser.parse
    @options[:command] = ARGV[0]
    @options[:table] = ARGV[1]
    Environment.environment = @options[:environment] || "production"
    @options.delete(:environment)
  end

  def main
    Environment.connect_to_database
    if options[:table] == 'complex'
      self.complex
    elsif options[:table] == 'apartment'
      self.apartment
    end
  end

  def complex
    command = options.delete(:command)
    if command == 'create'
      error_message = ApartmentComplex.validate(options)

      if error_message.nil?
        complex = ApartmentComplex.new(name: options[:name], zip: options[:zip], parking: options[:parking], website: options[:website], phone: options[:phone])
        complex.save
        puts "Complex #{options[:name]} was created."
      else
        puts error_message
      end

    elsif command == 'view'
      puts ApartmentComplex.all

    elsif command == "edit"
      if complex = ApartmentComplex.find_by(id: options[:id])
        complex.update(name: options[:name], zip: options[:zip], parking: options[:parking], website: options[:website], phone: options[:phone])
        puts "Complex #{complex.id} was updated."
        puts complex.to_s
      else
        puts "Complex #{options[:id]} does not exist."
      end
    end
  end

  def apartment
    command = options.delete(:command)
    if command == 'create'
      error_message = Apartment.validate(options)

      if error_message.nil?
        complex = ApartmentComplex.find_by(name: options[:complex])
        if complex.nil?
          puts "#{options[:complex]} complex does not exist."
        else
          apartment = Apartment.new(rent: options[:rent], size: options[:size], bedrooms: options[:bedrooms], bathrooms: options[:bathrooms], apartmentapartmentcomplex_id: complex.id)
          apartment.save
          puts "Apartment was created."
          puts apartment
        end
      else
        puts error_message
      end

    elsif command == 'edit'
      if apartment = Apartment.find_by(id: options[:id])
        apartment.update(rent: options[:rent], size: options[:size], bedrooms: options[:bedrooms], bathrooms: options[:bathrooms])
        puts "Apartment #{options[:id]} was updated."
        puts apartment.to_s
      else
        puts "Apartment #{options[:id]} does not exist."
      end

    elsif command == 'delete'
      Apartment.delete(options[:id])
      puts "Apartment #{options[:id]} was deleted."

    elsif command == 'view'
      puts Apartment.all

    elsif command == 'filter'
      puts Apartment.filter(options[:min], options[:max], options[:sort])
    end
  end

end

apartmenthunter = ApartmentHunter.new()
apartmenthunter.main()
